From c9db918fb4226de37d6ebbc8968b509c5e6ffbf6 Mon Sep 17 00:00:00 2001
From: Tarun Saha <tsaha@libertyglobal.com>
Date: Thu, 21 Jan 2021 10:47:02 -0800
Subject: [PATCH 1/1] prepend-ipv6-dnsserver

---
 ClntIfaceMgr/ClntIfaceIface.cpp     |  1 +
 Misc/Portable.h                     |  2 +
 Port-linux/lowlevel-options-linux.c | 71 +++++++++++++++++++++++++++++
 3 files changed, 74 insertions(+)

diff --git a/ClntIfaceMgr/ClntIfaceIface.cpp b/ClntIfaceMgr/ClntIfaceIface.cpp
index 5c950106..ea799fac 100644
--- a/ClntIfaceMgr/ClntIfaceIface.cpp
+++ b/ClntIfaceMgr/ClntIfaceIface.cpp
@@ -125,6 +125,7 @@ bool TClntIfaceIface::setDNSServerLst(SPtr<TDUID> duid, SPtr<TIPv6Addr> srv,
             this->DNSServerLst.append(addr);
         }
     }
+    dns_update(this->getName());
     return true;
 }
 
diff --git a/Misc/Portable.h b/Misc/Portable.h
index 486127a7..54b2ecbe 100644
--- a/Misc/Portable.h
+++ b/Misc/Portable.h
@@ -180,6 +180,7 @@ struct link_state_notify_t
 #define RESOLVCONF_FILE    "/etc/resolv.conf"
 #define NTPCONF_FILE       "/etc/ntp.conf"
 #define RADVD_FILE         "/etc/dibbler/radvd.conf"
+#define TMP_DNSSERVER_LIST "/tmp/dibbler.dnsserver"
 
 #if defined(BSD)
 #define SRVPID_FILE        "/var/run/dibbler-server.pid"
@@ -336,6 +337,7 @@ unsigned long pref, unsigned long valid, int prefixLength);
     /* options */
     extern int dns_add(const char* ifname, int ifindex, const char* addrPlain);
     extern int dns_del(const char* ifname, int ifindex, const char* addrPlain);
+    extern int dns_update(const char* ifname);
     extern int domain_add(const char* ifname, int ifindex, const char* domain);
     extern int domain_del(const char* ifname, int ifindex, const char* domain);
     extern int ntp_add(const char* ifname, int ifindex, const char* addrPlain);
diff --git a/Port-linux/lowlevel-options-linux.c b/Port-linux/lowlevel-options-linux.c
index c1350ee6..9513dc3c 100644
--- a/Port-linux/lowlevel-options-linux.c
+++ b/Port-linux/lowlevel-options-linux.c
@@ -221,6 +221,69 @@ int cfg_file_del(const char *file, const char *keyword, const char *value) {
     return(error);
 }
 
+/*
+ * results 0 - ok
+          -1 - unable to open temp. file
+          -2 - unable to open resolv.conf file
+ */
+int dns_update(const char * ifname) {
+    FILE * fresolvconf = NULL;
+    FILE * ftmp = NULL;
+    FILE * fdns = NULL;
+    char buf[512];
+    char template[]="/tmp/resolv.XXXXXX";
+    int tmpfd;
+    size_t len;
+    pid_t pid;
+
+#ifdef MOD_RESOLVCONF
+    /* dns list already updated by resolvconf utility */
+    return LOWLEVEL_NO_ERROR;
+#endif
+
+    if ( !(fdns = fopen(TMP_DNSSERVER_LIST, "r")) ) {
+        /* No new dns server available for update */
+        return LOWLEVEL_NO_ERROR;
+    }
+    if ((tmpfd = mkstemp(template)) == -1) {
+        fclose(fdns);
+        return (LOWLEVEL_ERROR_FILE);
+    }
+    close(tmpfd);
+
+    pid = fork();
+    if (pid == 0) {            /* Child Process */
+        execl("/bin/cp", "/bin/cp", RESOLVCONF_FILE, template, (char *)0);
+    } else if (pid > 0) {     /* Parent Process */
+        waitpid(pid, NULL, 0);
+        if ( !(fresolvconf = fopen(RESOLVCONF_FILE, "w")) ) {
+            fclose(fdns);
+            return LOWLEVEL_ERROR_FILE;
+        }
+        if ( !(ftmp = fopen(template, "r")) ) {
+            fclose(fresolvconf);
+            fclose(fdns);
+            return LOWLEVEL_ERROR_FILE;
+        }
+
+        while (fgets(buf,511,fdns))
+            fputs(buf, fresolvconf);
+
+        while (fgets(buf,511,ftmp))
+            fputs(buf, fresolvconf);
+
+        fclose(fresolvconf);
+        fclose(ftmp);
+        fclose(fdns);
+
+        unlink(template);
+        unlink(TMP_DNSSERVER_LIST);
+    } else {
+        fprintf(stderr, "error!!! couldn't fork child process \n");
+    }
+    return LOWLEVEL_NO_ERROR;
+}
+
 
 /*
  * results 0 - ok
@@ -235,7 +298,14 @@ int dns_add(const char * ifname, int ifaceid, const char * addrPlain) {
     /* try to use resolvconf */
     f=resolvconf_open("-a", ifname);
 #endif
+    if ( !(f = fopen(TMP_DNSSERVER_LIST, "a")) ) {
+        return LOWLEVEL_ERROR_FILE;
+    }
 
+    fprintf(f,"nameserver %s\n",addrPlain);
+    fclose(f);
+
+#if 0
     /* if resolvconf is not available, fallback to normal file append */
     if (!f && !(f=fopen(RESOLVCONF_FILE, "a+")) ) {
         sprintf(error_message(), "Unable to open %s file:%s",
@@ -254,6 +324,7 @@ int dns_add(const char * ifname, int ifaceid, const char * addrPlain) {
     }
     fprintf(f,"nameserver %s\n",addrPlain);
     fclose(f);
+#endif
     return LOWLEVEL_NO_ERROR;
 }
 
-- 
2.17.1

