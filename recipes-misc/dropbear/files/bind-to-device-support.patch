diff --git a/cli-main.c b/cli-main.c
index 7f455d1..14cf1a0 100644
--- a/cli-main.c
+++ b/cli-main.c
@@ -64,8 +64,8 @@ int main(int argc, char ** argv) {
 	}
 #endif
 
-	TRACE(("user='%s' host='%s' port='%s' bind_address='%s' bind_port='%s'", cli_opts.username,
-				cli_opts.remotehost, cli_opts.remoteport, cli_opts.bind_address, cli_opts.bind_port))
+	TRACE(("user='%s' host='%s' port='%s' bind_address='%s' bind_port='%s' bind_interface='%s'", cli_opts.username,
+				cli_opts.remotehost, cli_opts.remoteport, cli_opts.bind_address, cli_opts.bind_port, cli_opts.bind_interface))
 
 	if (signal(SIGPIPE, SIG_IGN) == SIG_ERR) {
 		dropbear_exit("signal() error");
@@ -85,7 +85,7 @@ int main(int argc, char ** argv) {
 #endif
 	{
 		progress = connect_remote(cli_opts.remotehost, cli_opts.remoteport, 
-			cli_connected, &ses, cli_opts.bind_address, cli_opts.bind_port);
+			cli_connected, &ses, cli_opts.bind_address, cli_opts.bind_port, cli_opts.bind_interface);
 		sock_in = sock_out = -1;
 	}
 
diff --git a/cli-runopts.c b/cli-runopts.c
index 3654b9a..045d3e8 100644
--- a/cli-runopts.c
+++ b/cli-runopts.c
@@ -93,6 +93,7 @@ static void printhelp() {
 					"-m <MAC list> Specify preferred MACs for packet verification (or '-m help')\n"
 #endif
 					"-b    [bind_address][:bind_port]\n"
+					"-x    [bind interface name]\n"
 					"-V    Version\n"
 #if DEBUG_TRACE
 					"-v    verbose (compiled with DEBUG_TRACE)\n"
@@ -132,6 +133,7 @@ void cli_getopts(int argc, char ** argv) {
 	char* idle_timeout_arg = NULL;
 	char *host_arg = NULL;
 	char *bind_arg = NULL;
+	char *bind_interface = NULL;
 	char c;
 
 	/* see printhelp() for options */
@@ -169,6 +171,7 @@ void cli_getopts(int argc, char ** argv) {
 #endif
 	cli_opts.bind_address = NULL;
 	cli_opts.bind_port = NULL;
+	cli_opts.bind_interface = NULL;
 #ifndef DISABLE_ZLIB
 	opts.compress_mode = DROPBEAR_COMPRESS_ON;
 #endif
@@ -319,6 +322,9 @@ void cli_getopts(int argc, char ** argv) {
 				case 'b':
 					next = &bind_arg;
 					break;
+				case 'x':
+					next = &bind_interface;
+					break;
 				default:
 					fprintf(stderr,
 						"WARNING: Ignoring unknown option -%c\n", c);
@@ -435,6 +441,10 @@ void cli_getopts(int argc, char ** argv) {
 			cli_opts.bind_address = m_strdup(bind_arg);
 		}
 	}
+	if (bind_interface && bind_interface[0] != '0')
+	{
+		cli_opts.bind_interface = m_strdup(bind_interface);
+	}
 
 	/* If not explicitly specified with -t or -T, we don't want a pty if
 	 * there's a command, but we do otherwise */
diff --git a/cli-tcpfwd.c b/cli-tcpfwd.c
index e6387d9..74ed8a7 100644
--- a/cli-tcpfwd.c
+++ b/cli-tcpfwd.c
@@ -275,7 +275,7 @@ static int newtcpforwarded(struct Channel * channel) {
 	}
 	
 	snprintf(portstring, sizeof(portstring), "%u", fwd->connectport);
-	channel->conn_pending = connect_remote(fwd->connectaddr, portstring, channel_connect_done, channel, NULL, NULL);
+	channel->conn_pending = connect_remote(fwd->connectaddr, portstring, channel_connect_done, channel, NULL, NULL, NULL);
 
 	channel->prio = DROPBEAR_CHANNEL_PRIO_UNKNOWABLE;
 	
diff --git a/netio.c b/netio.c
index 3988433..10d0b57 100644
--- a/netio.c
+++ b/netio.c
@@ -19,7 +19,7 @@ struct dropbear_progress_connection {
 	int sock;
 
 	char* errstring;
-	char *bind_address, *bind_port;
+	char *bind_address, *bind_port, *bind_interface;
 };
 
 /* Deallocate a progress connection. Removes from the pending list if iter!=NULL.
@@ -33,6 +33,7 @@ static void remove_connect(struct dropbear_progress_connection *c, m_list_elem *
 	m_free(c->errstring);
 	m_free(c->bind_address);
 	m_free(c->bind_port);
+	m_free(c->bind_interface);
 	m_free(c);
 
 	if (iter) {
@@ -107,6 +108,21 @@ static void connect_try_next(struct dropbear_progress_connection *c) {
 				continue;
 			}
 		}
+		if (c->bind_interface) {
+			res = setsockopt(c->sock, SOL_SOCKET, SO_BINDTODEVICE, c->bind_interface, strlen(c->bind_interface));
+			if (res != 0) {
+				/* failure */
+				int keep_errno = errno;
+				int len = 300;
+				m_free(c->errstring);
+				c->errstring = m_malloc(len);
+				snprintf(c->errstring, len, "Error binding to interface '%s'. %s",
+						 c->bind_interface, strerror(keep_errno));
+				close(c->sock);
+				c->sock = -1;
+				continue;
+			}
+		}
 
 		ses.maxfd = MAX(ses.maxfd, c->sock);
 		set_sock_nodelay(c->sock);
@@ -173,7 +189,7 @@ static void connect_try_next(struct dropbear_progress_connection *c) {
 /* Connect via TCP to a host. */
 struct dropbear_progress_connection *connect_remote(const char* remotehost, const char* remoteport,
 	connect_callback cb, void* cb_data, 
-	const char* bind_address, const char* bind_port)
+	const char* bind_address, const char* bind_port, const char* bind_interface)
 {
 	struct dropbear_progress_connection *c = NULL;
 	int err;
@@ -210,6 +226,9 @@ struct dropbear_progress_connection *connect_remote(const char* remotehost, cons
 	if (bind_port) {
 		c->bind_port = m_strdup(bind_port);
 	}
+	if (bind_interface) {
+		c->bind_interface = m_strdup(bind_interface);
+	}
 
 	return c;
 }
diff --git a/netio.h b/netio.h
index d61ef5e..91492c2 100644
--- a/netio.h
+++ b/netio.h
@@ -30,7 +30,7 @@ typedef void(*connect_callback)(int result, int sock, void* data, const char* er
 
 /* Always returns a progress connection, if it fails it will call the callback at a later point */
 struct dropbear_progress_connection * connect_remote (const char* remotehost, const char* remoteport,
-	connect_callback cb, void *cb_data, const char* bind_address, const char* bind_port);
+	connect_callback cb, void *cb_data, const char* bind_address, const char* bind_port, const char* bind_interface);
 
 /* Sets up for select() */
 void set_connect_fds(fd_set *writefd);
diff --git a/runopts.h b/runopts.h
index 6a4a94c..0e93231 100644
--- a/runopts.h
+++ b/runopts.h
@@ -182,6 +182,7 @@ typedef struct cli_runopts {
 #endif
 	char *bind_address;
 	char *bind_port;
+	char *bind_interface;
 } cli_runopts;
 
 extern cli_runopts cli_opts;
diff --git a/svr-tcpfwd.c b/svr-tcpfwd.c
index 9a2310d..262adad 100644
--- a/svr-tcpfwd.c
+++ b/svr-tcpfwd.c
@@ -285,7 +285,7 @@ static int newtcpdirect(struct Channel * channel) {
 	}
 
 	snprintf(portstring, sizeof(portstring), "%u", destport);
-	channel->conn_pending = connect_remote(desthost, portstring, channel_connect_done, channel, NULL, NULL);
+	channel->conn_pending = connect_remote(desthost, portstring, channel_connect_done, channel, NULL, NULL, NULL);
 
 	channel->prio = DROPBEAR_CHANNEL_PRIO_UNKNOWABLE;
 	
