From d2110fc10990d0269a251329e80795b093a16fef Mon Sep 17 00:00:00 2001
From: Tarun Saha <tsaha@libertyglobal.com>
Date: Tue, 7 Dec 2021 06:28:13 -0800
Subject: [PATCH 1/1] save client dhcp options

---
 src/config.h  |   4 ++
 src/dnsmasq.c |   3 ++
 src/dnsmasq.h |  10 +++++
 src/lease.c   | 116 ++++++++++++++++++++++++++++++++++++++++++++++++++
 src/rfc2131.c |  12 ++++++
 5 files changed, 145 insertions(+)

diff --git a/src/config.h b/src/config.h
index f9e3269..f1a2ba3 100644
--- a/src/config.h
+++ b/src/config.h
@@ -232,6 +232,10 @@ RESOLVFILE
 #    endif
 #endif
 
+#ifndef CLNT_OPTSFILE
+#define CLNT_OPTSFILE "/nvram/dnsmasq.options"
+#endif
+
 /* platform dependent options: these are determined automatically below
 
 HAVE_LINUX_NETWORK
diff --git a/src/dnsmasq.c b/src/dnsmasq.c
index 8c1adb1..81914e8 100644
--- a/src/dnsmasq.c
+++ b/src/dnsmasq.c
@@ -1549,6 +1549,9 @@ static void async_event(int pipe, time_t now)
 	if (daemon->lease_stream)
 	  fclose(daemon->lease_stream);
 
+	if (daemon->clnt_opt_stream)
+	  fclose(daemon->clnt_opt_stream);
+
 #ifdef HAVE_DNSSEC
 	/* update timestamp file on TERM if time is considered valid */
 	if (daemon->back_to_the_future)
diff --git a/src/dnsmasq.h b/src/dnsmasq.h
index dcba422..13a4d60 100644
--- a/src/dnsmasq.h
+++ b/src/dnsmasq.h
@@ -736,6 +736,11 @@ struct dhcp_lease {
   int last_interface;
   int new_interface;     /* save possible originated interface */
   int new_prefixlen;     /* and its prefix length */
+  int vid_len, cid_len, uc_len, vident_len;
+  unsigned char *vendorId;
+  unsigned char *clientId;
+  unsigned char *userClass;
+  unsigned char *vendorIdentOpt;
 #ifdef HAVE_DHCP6
   struct in6_addr addr6;
   unsigned int iaid;
@@ -1139,6 +1144,7 @@ extern struct daemon {
   char *dhcp_buff, *dhcp_buff2, *dhcp_buff3;
   struct ping_result *ping_results;
   FILE *lease_stream;
+  FILE *clnt_opt_stream;
   struct dhcp_bridge *bridges;
   struct shared_network *shared_networks;
 #ifdef HAVE_DHCP6
@@ -1441,6 +1447,10 @@ void lease_set_hwaddr(struct dhcp_lease *lease, const unsigned char *hwaddr,
 void lease_set_hostname(struct dhcp_lease *lease, const char *name, int auth, char *domain, char *config_domain);
 void lease_set_expires(struct dhcp_lease *lease, unsigned int len, time_t now);
 void lease_set_interface(struct dhcp_lease *lease, int interface, time_t now);
+void lease_set_vendorId(struct dhcp_lease *lease, const void *opt, int len);
+void lease_set_clientId(struct dhcp_lease *lease, const void *opt, int len);
+void lease_set_userClass(struct dhcp_lease *lease, const void *opt, int len);
+void lease_set_vendorIdentOp(struct dhcp_lease *lease, const void *opt, int len);
 struct dhcp_lease *lease_find_by_client(unsigned char *hwaddr, int hw_len, int hw_type,  
 					unsigned char *clid, int clid_len);
 struct dhcp_lease *lease_find_by_addr(struct in_addr addr);
diff --git a/src/lease.c b/src/lease.c
index a83ab6d..8544a6b 100644
--- a/src/lease.c
+++ b/src/lease.c
@@ -175,6 +175,7 @@ void lease_init(time_t now)
     {
       /* NOTE: need a+ mode to create file if it doesn't exist */
       leasestream = daemon->lease_stream = fopen(daemon->lease_file, "a+");
+      daemon->clnt_opt_stream = fopen(CLNT_OPTSFILE, "a+");
 
       if (!leasestream)
 	die(_("cannot open or create lease file %s: %s"), daemon->lease_file, EC_FILE);
@@ -265,6 +266,9 @@ void lease_update_file(time_t now)
       if (errno != 0 || ftruncate(fileno(daemon->lease_stream), 0) != 0)
 	err = errno;
       
+      rewind(daemon->clnt_opt_stream);
+      ftruncate(fileno(daemon->clnt_opt_stream), 0);
+
       for (lease = leases; lease; lease = lease->next)
 	{
 
@@ -302,6 +306,39 @@ void lease_update_file(time_t now)
 	    }
 	  else
 	    ourprintf(&err, "*\n");	  
+
+	  fprintf(daemon->clnt_opt_stream, "client %s 1\n", daemon->addrbuff);
+	  if (lease->vendorId)
+	  {
+	    fprintf(daemon->clnt_opt_stream, "option %d ", OPTION_VENDOR_ID);
+	    for (i=0; i<lease->vid_len; i++)
+	      fprintf(daemon->clnt_opt_stream, "%02X", lease->vendorId[i]);
+	    fprintf(daemon->clnt_opt_stream, "\n");
+	  }
+
+	  if (lease->clientId)
+	  {
+	    fprintf(daemon->clnt_opt_stream, "option %d ", OPTION_CLIENT_ID);
+	    for (i=0; i<lease->cid_len; i++)
+	      fprintf(daemon->clnt_opt_stream, "%02X", lease->clientId[i]);
+	    fprintf(daemon->clnt_opt_stream, "\n");
+	  }
+
+	  if (lease->userClass)
+	  {
+	    fprintf(daemon->clnt_opt_stream, "option %d ", OPTION_USER_CLASS);
+	    for (i=0; i<lease->uc_len; i++)
+	      fprintf(daemon->clnt_opt_stream, "%02X", lease->userClass[i]);
+	    fprintf(daemon->clnt_opt_stream, "\n");
+	  }
+
+	  if (lease->vendorIdentOpt)
+	  {
+	    fprintf(daemon->clnt_opt_stream, "option %d ", OPTION_VENDOR_ID);
+	    for (i=0; i<lease->vident_len; i++)
+	      fprintf(daemon->clnt_opt_stream, "%02X", lease->vendorIdentOpt[i]);
+	    fprintf(daemon->clnt_opt_stream, "\n");
+	  }
 	}
       
 #ifdef HAVE_DHCP6  
@@ -346,6 +383,9 @@ void lease_update_file(time_t now)
 	  fsync(fileno(daemon->lease_stream)) < 0)
 	err = errno;
       
+      fflush(daemon->clnt_opt_stream);
+      fsync(fileno(daemon->clnt_opt_stream));
+
       if (!err)
 	file_dirty = 0;
     }
@@ -575,6 +615,30 @@ void lease_prune(struct dhcp_lease *target, time_t now)
 	      lease->fingerprint = NULL;
 	    }
 
+	  if (lease->vendorId)
+	    {
+	      free(lease->vendorId);
+	      lease->vendorId = NULL;
+	    }
+
+	  if (lease->clientId)
+	    {
+	      free(lease->clientId);
+	      lease->clientId = NULL;
+	    }
+
+	  if (lease->userClass)
+	    {
+	      free(lease->userClass);
+	      lease->userClass = NULL;
+	    }
+
+	  if (lease->vendorIdentOpt)
+	    {
+	      free(lease->vendorIdentOpt);
+	      lease->vendorIdentOpt = NULL;
+	    }
+
 	  daemon->metrics[lease->addr.s_addr ? METRIC_LEASES_PRUNED_4 : METRIC_LEASES_PRUNED_6]++;
 
  	  *up = lease->next; /* unlink */
@@ -1065,6 +1129,58 @@ void lease_set_interface(struct dhcp_lease *lease, int interface, time_t now)
 #endif
 }
 
+void lease_set_vendorId(struct dhcp_lease *lease, const void *opt, int len)
+{
+  if (lease->vendorId)
+  {
+    free(lease->vendorId);
+    lease->vendorId = NULL;
+  }
+
+  lease->vendorId = malloc(len);
+  memcpy(lease->vendorId, opt, len);
+  lease->vid_len = len;
+}
+
+void lease_set_clientId(struct dhcp_lease *lease, const void *opt, int len)
+{
+  if (lease->clientId)
+  {
+    free(lease->clientId);
+    lease->clientId = NULL;
+  }
+
+  lease->clientId = malloc(len);
+  memcpy(lease->clientId, opt, len);
+  lease->cid_len = len;
+}
+
+void lease_set_userClass(struct dhcp_lease *lease, const void *opt, int len)
+{
+  if (lease->userClass)
+  {
+    free(lease->userClass);
+    lease->userClass = NULL;
+  }
+
+  lease->userClass = malloc(len);
+  memcpy(lease->userClass, opt, len);
+  lease->uc_len = len;
+}
+
+void lease_set_vendorIdentOp(struct dhcp_lease *lease, const void *opt, int len)
+{
+  if (lease->vendorIdentOpt)
+  {
+    free(lease->vendorIdentOpt);
+    lease->vendorIdentOpt = NULL;
+  }
+
+  lease->vendorIdentOpt = malloc(len);
+  memcpy(lease->vendorIdentOpt, opt, len);
+  lease->vident_len = len;
+}
+
 void rerun_scripts(void)
 {
   struct dhcp_lease *lease;
diff --git a/src/rfc2131.c b/src/rfc2131.c
index 4ea9eaf..5a99a12 100644
--- a/src/rfc2131.c
+++ b/src/rfc2131.c
@@ -1678,6 +1678,18 @@ size_t dhcp_reply(struct dhcp_context *context, char *iface_name, int int_index,
 	  lease_set_expires(lease, time, now);
 	  lease_set_interface(lease, int_index, now);
 
+	  if ((opt = option_find(mess, sz, OPTION_VENDOR_ID, 1)))
+	     lease_set_vendorId(lease, option_ptr(opt, 0), option_len(opt));
+
+	  if ((opt = option_find(mess, sz, OPTION_CLIENT_ID, 1)))
+	     lease_set_clientId(lease, option_ptr(opt, 0), option_len(opt));
+
+	  if ((opt = option_find(mess, sz, OPTION_USER_CLASS, 1)))
+	     lease_set_userClass(lease, option_ptr(opt, 0), option_len(opt));
+
+	  if ((opt = option_find(mess, sz, OPTION_VENDOR_IDENT_OPT, 1)))
+	     lease_set_vendorIdentOp(lease, option_ptr(opt, 0), option_len(opt));
+
 	  if (override.s_addr != 0)
 	    lease->override = override;
 	  else
-- 
2.17.1

