diff --git a/ripd/ripd.c b/ripd/ripd.c
index 8f7e077..9d641f0 100644
--- a/ripd/ripd.c
+++ b/ripd/ripd.c
@@ -66,7 +66,6 @@ long rip_global_queries = 0;
 static void rip_event (enum rip_event, int);
 static void rip_output_process (struct connected *, struct sockaddr_in *, int, u_char);
 static int rip_triggered_update (struct thread *);
-static int rip_update_jitter (unsigned long);
 
 /* RIP output routes type. */
 enum
@@ -2783,31 +2782,10 @@ rip_request_send (struct sockaddr_in *to, struct interface *ifp,
   return sizeof (rip_packet);
 }
 
-static int
-rip_update_jitter (unsigned long time)
-{
-#define JITTER_BOUND 4
-  /* We want to get the jitter to +/- 1/JITTER_BOUND the interval.
-     Given that, we cannot let time be less than JITTER_BOUND seconds.
-     The RIPv2 RFC says jitter should be small compared to
-     update_time.  We consider 1/JITTER_BOUND to be small.
-  */
-  
-  int jitter_input = time;
-  int jitter;
-  
-  if (jitter_input < JITTER_BOUND)
-    jitter_input = JITTER_BOUND;
-  
-  jitter = (((random () % ((jitter_input * 2) + 1)) - jitter_input));  
-
-  return jitter/JITTER_BOUND;
-}
 
 void
 rip_event (enum rip_event event, int sock)
 {
-  int jitter = 0;
 
   switch (event)
     {
@@ -2820,10 +2798,9 @@ rip_event (enum rip_event event, int sock)
 	  thread_cancel (rip->t_update);
 	  rip->t_update = NULL;
 	}
-      jitter = rip_update_jitter (rip->update_time);
       rip->t_update = 
 	thread_add_timer (master, rip_update, NULL, 
-			  sock ? 2 : rip->update_time + jitter);
+			  sock ? 2 : rip->update_time);
       break;
     case RIP_TRIGGERED_UPDATE:
       if (rip->t_triggered_interval)
